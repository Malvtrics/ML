代码包含中文要在头部指定 #coding=utf-8

以下划线开头的标识符是有特殊意义的。以单下划线开头（_foo）的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用"from xxx import *"而导入；

以双下划线开头的（__foo）代表类的私有成员；以双下划线开头和结尾的（__foo__）代表python里特殊方法专用的标识，如__init__（）代表类的构造函数。

IndentationError: unexpected indent 错误是python编译器是在告诉你"Hi，老兄，你的文件里格式不对了，可能是tab和空格没对齐的问题"，所有python对格式要求非常严格。
IndentationError: unindent does not match any outer indentation level错误表明，你使用的缩进方式不一致，有的是 tab 键缩进，有的是空格缩进，改为一致即可。
因此，在Python的代码块中必须使用相同数目的行首缩进空格数。建议你在每个缩进层次使用单个制表符或两个空格或四个空格, 切记不能混用。

用编译型语言写的程序执行之前，需要一个专门的编译过程，通过编译系统（不仅仅只是通过编译器，编译器只是编译系统的一部分）把高级语言翻译成机器语言（具体翻译过程可以参看下图），把源高级程序编译成为机器语言文件，比如windows下的exe文件。以后就可以直接运行而不需要编译了，因为翻译只做了一次，运行时不需要翻译，所以编译型语言的程序执行效率高，但也不能一概而论，部分解释型语言的解释器通过在运行时动态优化代码，甚至能够使解释型语言的性能超过编译型语言。
安装的时候有个选项可以直接修改环境变量，用CMD运行一个PYTHON文件时要首先进入该文件所在目录

如果脚本文件的第一行以 #! 开头，则称为 "shebang" 行。Linux和其他类Unix操作系统都有对这些行的本机支持，它们通常在此类系统上用来指示应该如何执行脚本

IED就用 VSCODE 原因是https://arbisoft.com/vs-code-versus-pycharm-the-smackdown/

eval 函数的用法，把引号去掉后执行引号里面的内容
print('转换之后的温度是{:.2f}C'.format(C)) 把C改成两位小数的格式输出，注意没有四舍五入

关于报错：AttributeError: module 'turtle' has no attribute 'setup' 问题 (我的文件是turtle.py估计系统那个文件也是。。。)
对于我们菜鸟，往往安装软件后，都容易使用默认设置，结果将写的文件保存到了安装目录下。
这样造成了很大得隐患，如果写得文件，名称与安装目录下得系统文件名称重复，就容易出现以上报错。
解决方法：1.将文件名称修改为与安装目录下得系统文件名称不冲突。
2.最好直接将自己得文件保存路径修改为其他地方，不要与安装目录重复

print的一种使用方法，将要打印的东西用逗号分隔 eg: print("Hello", "Martin") 注意这样的输出是 Hello Martin 中间是有空格的

import 简单导入 
from import  容易导致引用库的函数名字和自己定义的函数名字重复
import as  推荐这种引用方法

2019-8-16
-308到+308 精度10的﹣16次方
PYTHON中用53位二进制表示小数部分
整数除法结果是浮点数 两个除号结果是整数
X**Y计算X的Y次幂
print(pow(3,pow(3,99),4512)) 没有最后一个参数的话，数值太大无法显示，作用是控制目标数据大小

三个单引号 表示的是字符串，只不过可以当成注释来使用而已 
python中共有两类四种字符串表示方法
如果希望一个字符串中有单引号，外面就用双引号 反之亦然
如果希望一个字符串中又有单引号 又有双引号  外面就用一对三单引号

字符串 str[M:N] 表示从M开始到N前一位结束，注意是N前面一位，不包括N
把字符串倒序的一种方式 str[::-1]

2019-8-17
字符串处理函数6个常用
len python中认为一个中文是一个字符
str(做了和eval函数相反的工作） 
hex() ox() 
chr(u)/ord(x) unicode 编码从0到0x10ffff 1114111 空间

8个常用的字符串处理方法
lower upper count replace center strip join format
其中字符串格式化有6中
填充 默认空字符串
对齐 默认左对齐 箭头向左， 有三种 左右中
宽度 
数字千位分隔符， 需要的话就写逗号
小数点后精度 以及字符串最大长度
类型 整数类型b c d o x X 浮点类型 e f E %

time库  
time() 1970年0点0分开始 的时间戳 秒为单位
ctime() 用户易读
gtime() 程序易用
strftime() strptime()
注意：在Windows里，time.strftime使用C运行时的多字节字符串函数strftime，这个函数必须先根据当前locale配置来编码格式化字符串
（使用PyUnicode_EncodeLocale）。”如果不设置好locale的话，根据默认的"C" locale，底层的wcstombs函数会使用latin-1编码（单字节编码）
来编码格式化字符串
所以要用下面代码
import locale
locale.setlocale(locale.LC_CTYPE, 'chinese')
print(nt.strftime('%Y年%m月%d日'))
2015年08月10日

perf_counter() end - start CPU纳米级别精准时间差

2019-8-18
getrandbits(n) 以长整型形式返回n个随机位（二进制数）
需要将多行代码放在一行中 用分号隔开

根据二八法则，八成时间消耗在两成代码中，这些代码大部分是循环代码，所以主要看循环代码的性能

try catch else finally
while和for也可以通过else来看是否有用到break

def fab(n,m=1) m是可选参数 可选参数要放在必须参数后面
def fab(n,*b) *b是可变参数 可以是逗号分开的很多参数
可以返回0个或者多个结果 return s,s1,s2
在函数中用global保留字申明使用全局变量

局部变量是组合数据类型且没有创建，等同于全局变量
如果局部变量声明了，那么还是局部变量的值 
理解局部变量：底层是C实现的，所以用的是指针，如果没有声明的时候，相当于用的是指针，这个时候指针指向全局变量的指针

f = lambda x,y : x+y
一般最好使用def方式 lambda是用于特定情况

写递归的主要思路 ： 基例（n=1时候初始处理） 链条（n-1的时候是如果处理的） 分支（用if else的形式呈现出来）

2019-8-20
windows电脑安装 pyinstaller
在CMD下执行 pip install pyinstaller
然后在对应python文件夹中执行 pyinstaller -i -curve.ico -Fxxxx.py
注意 图标，要生成EXE的python文件要统一在当前目录 cmd也要先进入当前程序目录
结束后会生成一个dist的文件夹，里面包含了EXE文件

2019-8-21
list1 = [1,2]
list2 = list1
list2.append(3)
list1 变成 [1,2,3] 所以list2只是列表的另外一个别名，和list1共同指向同一块数值内存空间
如果要复制一个新的用 list2 = list1.copy()
append 是把对象当成一个整体加入 extend 是分开加入
remove() 函数用于移除列表中某个值的第一个匹配项， 注意是只删除第一个

{}空大括号的形式本来是用来表示集合的，但是因为字典在编程中更常出现，所以把这个保留给空字典
jieba 库 和 pyinstaller的用法要回去之后在家里试验一下，单位电脑无法安装

处理的文件类型主要包括文本文件和二进制文件
文本文件 由单一特定编码组成的文件

/斜杠 在windwow 中 用反斜杠表示路径 但是python中反斜杠是转义字符，所以在python中表示路径的时候
1）用斜杠表示 2）用两个反斜杠
四种文件读写模式 r读 w覆盖写 x创建写 a追加写 注意区别 （默认模式是r）
两种文件格式模式 b二进制打开 t文本文件模式 默认模式是t
+号 和rwxa共同使用 增加读写功能
