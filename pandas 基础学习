# -*- coding: utf-8 -*-
"""
Created on Fri Nov  8 17:31:58 2019

@author: buptw
"""

import pandas as pd
from matplotlib import pyplot as plt

data = pd.read_csv('C:\\Users\\buptw\\Desktop\\lesson8 pandas表格处理\\data\\titanic_train.csv')
#print(data.info())

s01 = data.Pclass[data.Survived==0].value_counts()
s02 = data.Pclass[data.Survived==1].value_counts()
#
#print(s01)
#print(s02)


s03 = data.Sex[data.Survived==0].value_counts()
s04 = data.Sex[data.Survived==1].value_counts()
#
#print(s03)
#print(s04)
          
#fig = plt.figure(figsize=(20,10))
#ax1 = fig.add_subplot(141)
#data.Survived[data.Sex=='female'][data.Pclass!=3].value_counts().plot(kind='bar',label='hf')
#ax2 = fig.add_subplot(142)
#data.Survived[data.Sex=='female'][data.Pclass==3].value_counts().plot(kind='bar',label='lf')
#ax3 = fig.add_subplot(143)
#data.Survived[data.Sex=='male'][data.Pclass!=3].value_counts().plot(kind='bar',label='hm')
#ax4 = fig.add_subplot(144)
#data.Survived[data.Sex=='maie'][data.Pclass==3].value_counts().plot(kind='bar',label='lm')
 
#from sklearn.ensemble import RandomForestRegressor
#
##从大的dataframe中取几个列形成的dataframe
#age_df = data[['Age','Fare','Parch','SibSp','Pclass']] # data['Age'] 取一列 取多列需要[[]]
##从dataframe中取符合条件的数据输出series 然后用values输出ndarray
#known_age = age_df[age_df.Age.notnull()].values
#unknown_age = age_df[age_df.Age.isnull()].values
#y = known_age[:,0]
#x = known_age[:,1:]
#rfr = RandomForestRegressor(random_state=0,n_estimators=2000,n_jobs=-1)
#rfr.fit(x,y)
#predicted_ages = rfr.predict(unknown_age[:,1:])
#data.loc[(data.Age.isnull()),'Age'] = predicted_ages
##print(data.Age)

#做特征转化的典型例子 性别本来是一个特征，但是如果做线性回归的话 要展开两个特征 然后分析权重
dummies_sex = pd.get_dummies(data['Sex'],prefix='sex')
print(dummies_sex)
new_data = pd.concat([data,dummies_sex],axis=1) #注意默认是行廉洁，要加axis
new_data.drop(['Sex'],axis=1,inplace=True)
#用法：DataFrame.drop(labels=None,axis=0, index=None, columns=None, inplace=False)
#
#参数说明：
#labels 就是要删除的行列的名字，用列表给定
#axis 默认为0，指删除行，因此删除columns时要指定axis=1；
#index 直接指定要删除的行
#columns 直接指定要删除的列
#inplace=False，默认该删除操作不改变原数据，而是返回一个执行删除操作后的新dataframe；
#inplace=True，则会直接在原数据上进行删除操作，删除后无法返回。
#
#因此，删除行列有两种方式：
#1）labels=None,axis=0 的组合
#2）index或columns直接指定要删除的行或列
print(new_data.head())
