0.首先的首先，python是动态类型语言中的强类型语言，强类型语言说明他是类型安全的，;动态类型语言说明python解释器在运行期间才去检测类型错误
1.命名规范:字母/下划线开头后跟数字/字母/下划线 https://www.jianshu.com/p/a793c0d960fe
2.代码包含中文要在头部指定 #coding=utf-8
3.低级错误：自己的文件命名不要和系统文件命名一样
4.整数范围-308到+308 精度10的﹣16次方 / 用53位二进制表示小数部分 
5.pyhton3中，"/"表示的就是float除，不需要再引入模块 0o八进制 0x16
6.pow(x,y,z)相当于x**y%z :当z这个参数不存在时 x,y 不限制是否为 float 类型, 而当使用第三个参数的时候要保证前两个参数只能为整数
9:x and y 布尔"与" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。
  x or y 布尔"或" - 如果 x 是 True，它返回 True，否则它返回 y 的计算值。
	a = 10 
	b = 20 
	print(a and b)
	print(a or b)
10:字符串 str[M:N] / str[M:N:K] 左闭右开 把字符串倒序的一种方式 str[::-1]
11:6个串处理函数
   len('草') = 1 / str() 
   bin(10) 10转2 / hex(255) 10转16 / oct(10) 10转8 
   chr(97) 'a' ord('a') 97 ascii数值和码转换
12:串处理方法
   lower/upper/title(首字母大写) count replace(不改变原来字符串的内容) center find(返回匹配支付串的第一个位置)
   str.center(20, '*')'*******runoob*******' / strip(没有参数默认去掉两侧空格(包括\r\n) str.strip([chars])去除指定) 
   join函数 注意join函数的参数是字符串数组 
   format函数 注意格式是: 参数序号:格式控制参数
      有6种格式控制参数 前三个记忆T(填充)D(对齐)K(宽度)
      填充 默认空字符串 注意下面特殊实例
        s='PYTHON'
        print("{0:3}".format(s))
        {0:3}表示输出的宽度是3，但如果字符串超过长度3，则以字符串长度显示
      对齐 默认左对齐 箭头向左， 有三种 左右中
      宽度 
      数字千位分隔符， 需要的话就写逗号
      小数点后精度 以及字符串最大长度
      类型 整数类型b c d o x X 浮点类型 e f E %
        注意有四舍五入
        print('用百分号表示是{:.2%}C'.format(0.25679))  --25.68%C
        print('用小数表示是{:.2f}C'.format(0.25679)) --0.26C
13:time库  
  time() 1970年0点0分开始 的时间戳 秒为单位
  ctime() 用户易读
  gtime() 程序易用
  strftime() strptime()
    注意：在Windows里，time.strftime使用C运行时的多字节字符串函数strftime，这个函数必须先根据当前locale配置来编码格式化字符串
   （使用PyUnicode_EncodeLocale）如果不设置好locale的话，根据默认的"C" locale，底层的wcstombs函数会使用latin-1编码（单字节编码）来编码格式化串
    所以要用下面代码
      import locale
      locale.setlocale(locale.LC_CTYPE, 'chinese')
      print(nt.strftime('%Y年%m月%d日'))
  perf_counter() end - start CPU纳米级别精准时间差
14:getrandbits(n) 以长整型形式返回n个随机位（二进制数）
15:需要将多行代码放在一行中用分号隔开
16:try except 如果出现异常 到except块处理，也可以  except 异常类型名称 来单独响应某一类异常
17:while和for也可以通过else来看是否有用到break
   注意python里面的for循环，在循环内部不能修改index 详细区别可以参考
   https://kaijento.github.io/2017/03/15/modifying-index-in-a-python-for-loop/
18:def fab(n,m=1) m是可选参数 可选参数要放在必须参数后面 / def fab(n,*b) *b是可变参数 可以是逗号分开的很多参数

20:函数入参与返回值问题

   + 函数可以返回0个或者多个结果 return s,s1,s2
   + 一个函数可以有return，也可以没有,但无论有没有return，函数都被返回一个对象。如果没有return,返回的是None对象，它的type就是NoneType.
   + 函数参数是空列表的问题
   	python函数中参数默认值为一个列表且为空时，该列表只初始化一次，而不是像其他程序，每次初始化都为空。为了避免这种情况，最好写成my_list=None
	def printList(my_list=[]):
	   my_list.append('list')
	   print my_list
	     
	printList() #['list']
	printList() #['list','list']
	printList() #['list','list','list']
	
21:在函数中用global保留字使用全局变量
22:局部变量是组合数据类型且没有创建，等同于全局变量/如果局部变量声明了，那么还是局部变量的值 
   理解局部变量：底层是C实现的，所以用的是指针，如果没有声明的时候，相当于用的是指针，这个时候指针指向全局变量的指针
23:f = lambda x,y : x+y
  一般最好使用def方式 lambda是用于特定情况, 理解：x,y是函数参数 后面的是函数主体 也可以这样用 (lambda x,y : x+y)(4,5) 注意前面上括号
  问题：为什么 print((lambda x,y : print("aver is {:.2f}".format((x+y)/2)))(4,5)) 会打印出一个多余的None
24:写递归的主要思路: 基例（n=1时候初始处理） 链条（n-1的时候是如果处理的） 分支（用if else的形式呈现出来）

25:列表的几个问题：
	+ 初始化一个空列表的两种方法以及区别
		>>> import dis
		>>> def f1(): return list()
		>>> def f2(): return []
		>>> dis.dis(f1)
		  1           0 LOAD_GLOBAL              0 (list)
			      3 CALL_FUNCTION            0
			      6 RETURN_VALUE        
		>>> dis.dis(f2)
		  1           0 BUILD_LIST               0
			      3 RETURN_VALUE 
		Use the second form. It's more Pythonic, and it's probably faster (since it doesn't involve loading and calling a separate funciton).
	+ append 是把对象当成一个整体加入 / extend 是分开加入
	+ remove() 函数用于移除列表中某个值的第一个匹配项， 注意是只删除第一个
	
27:{}空大括号的形式本来是用来表示集合的，但是因为字典在编程中更常出现，所以把这个保留给空字典
28:集合操作：
    t.add('x')            # 添加一项
    s.update([10,37,42])  # 在s中添加多项
    t.remove('H')
    len(s)
  集合间: A&B 交集 A^B 补集 A|B 并集 
  
29:Python中的字典
    + 如何倒序？
        a = list(dict.items()) # 需要先把字典转化为数组，不然没办法排序
	a.sort(key=lambda x:x[1], reverse=True)
	或者
	b=sorted(dict.items(),key=lambda x:x[1],reverse=True)
	注意两种不同的用法
    + 取值的正确姿势？
	对于字典，如果其中key很多，有时候不知道某个key是否存在，用key直接访问比较危险，所以应当使用 get 而且如果key不存在还可以赋值
    + 有那些方法？
	- fromkeys
		seq = ('Google', 'Runoob', 'Taobao')
		dict = dict.fromkeys(seq)
		print(str(dict))
		#{'Google': None, 'Taobao': None, 'Runoob': None} 
		dict = dict.fromkeys(seq, 10)
		print(str(dict)))
		{'Google': 10, 'Taobao': 10, 'Runoob': 10}
     + 只有不可变对象可以作为字典的key，可以被哈希 (数字、字符串和元组)   
     + 高级使用？
     	python中有高级的orderdict 可以按照插入顺序排序，orderdict有个方法 popitem 默认删除并返回最后一个 可以通过方法参数 last = False 删除并返回第一个

元组 当有一个元素时要定义为 (1,) 如果是(1) 是int类型
元组 add是打包添加 update是拆分添加

30:处理的文件类型主要包括文本文件和二进制文件 / 文本文件 由单一特定编码组成的文件
31:/斜杠 在windwow 中 用反斜杠表示路径 但是python中反斜杠是转义字符，所以在python中表示路径的时候: 1）用斜杠表示 2）用两个反斜杠
32:四种文件读写模式 r读 w覆盖写 x创建写 a追加写 注意区别 （默认模式是r）
   两种文件格式模式 b二进制打开 t文本文件模式 默认模式是t
   +号 和rwxa共同使用 增加读写功能
35:文件处理
  1)The open() function returns a file object, which has a read() method for reading the content of the file:
  2)writelines函数参数是列表，但是并不是把列表中每一个元素按照行写到文件中，是把列表中元素拼接为一个字符串然后写一行到文件中
  3)注意文件操作过程中文件指针的作用
    seek函数有三个参数012
    0表示文件头1表示当前位置2表示文件尾
    当写完一个文件时，指针在文件尾，这个时候需要将文件指针回到文件头，才能读取全部文件信息
36:Python3 比 2 强在哪里?
   + print函数
   + 用UTF-8为默认编码 中文友好
   + 单除号默认是 float 除
   + 引入 bytes 在字符引号前加‘b’，明确表示这是一个 bytes 类型 通过encode 和 decode 与 str 转化
   + range 返回迭代器 统一2中的range 和 xrange
   + map filter 返回的是生成器 提高性能
   + reduce 放到functools
   
37:循环中如何控制步长 for i in range(1, 10, 2):
   数组切片如何控制步长 arr[::2]
38:print(''.join(['零一二三四五六七八九'[eval(i)] for i in input()]))
40:Python中可以用如下方式表示正负无穷：float("inf"), float("-inf")
  0 * float("inf") => nan / float('inf')/float('inf') => nan
  当涉及 > 和 < 运算时 / 所有数都比-inf大 / 所有数都比+inf小
41:id() 函数用于获取对象的内存地址
42:Python运算符通常由左向右结合，即具有相同优先级的运算符按照从左向右的顺序计算。例如，2 + 3 + 4被计算成(2 + 3) + 4。
一些如赋值运算符那样的运算符是由右向左结合的，即a = b = c被处理为a = (b = c)
x=3==3,5 从右向左  x => (True,5)
42:类的学习
   先用pass占位置 起架构 再用具体的函数代替 (注意pass也可以做空行提高可读性 类似于sql中的go)
   类中定义函数时，语法规定第一个参数必须是self 注意self是类的实例 self._class_ 指向类 self不是python关键字 可以换成其他名称
   两个下划线开头定义私有成员和私有方法 注意不是一个下划线
   python中类方法去、实例方法、静态方法 https://zhuanlan.zhihu.com/p/28010894
       + 主要要注意的静态方法，如果在方法中不需要访问任何实例方法和属性，纯粹地通过传入参数并返回数据的功能性方法，那么它就适合用静态方法来定义，
       + 它节省了实例化对象的开销成本，往往这种方法放在类外面的模块层作为一个函数存在也是没问题的，而放在类中，仅为这个类服务。
       + 例如微信公众号开发中验证微信签名，不需要引用任何类或者实例相关的属性和方法
   如何让类支持比较操作 https://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p24_making_classes_support_comparison_operations.html 
       + 需要重写 __lt__ 等方法
   __new__ 和  __init__ :
       + __new__  创建一个类实例   __init__初始化一个已被创建的实例
       + __init__不能有返回值
       + __new__函数直接上可以返回别的类的实例
       + 只有在__new__返回一个新创建属于该类的实例时当前类的__init__才会被调用
43:split 方法默认用空格分割

45:判断一行是不是空行 len(line) == 1  and line[-1]=='\n'
46:打开文件后采用close()关闭文件,不写也行，程序关闭时也会清理
47:处理CSV文件的时候 注意\n换行符的处理
48:isdigit() 方法检测字符串是否只由数字组成
49:python递归深度问题
  Python默认递归深度是很有限的，当递归深度超过值的时候，就会引发RuntimeError异常。
  Python专门设置的一种机制用来防止无限递归造成Python溢出，这个值理论上1000(可以用sys.getrecursionlimit()获得)，实际运行时在900多次时就会报错。
  解决方法:最大递归次数是可以重新调整的。解决的方式是手工设置递归调用深度： 
    import sys 
    sys.setrecursionlimit(1000000) #执行这个代码后，递归深度调整到1000000层，基本上够用了。
    其他办法：
    递归是个好东西，但是要少些，太耗费内存。容易溢出，所以递归的改成非递归的即可。
    多说一句sys在调用python脚本传递参数时候的用法 sys.argv[0]是脚本名称 其他参数通过 空格隔开
50:当前执行文件路径、系统最大UNICODE编码值 sys.executable, sys.maxunicode 扩展：知道这些有什么意义？？
51:100以内质数求和简单代码
    s=0
    for i in range(2,100):
        for j in range(2,i):
            if(i%j==0):
                break
        else:
            s+=i
    print(s)
52:注意函数调用中参数的语法 http://www.runoob.com/python3/python3-function.html
   以及如何给函数参数增加元信息 https://python3-cookbook.readthedocs.io/zh_CN/latest/c07/p03_attach_informatinal_matadata_to_function_arguments.html
53:注意is运算符 理解：一个人起了两个名字
54:变量可以交换赋值，比如 a,b,c = c,a,b 
55:用enumerate遍历元素
    li = ['tensorflow','AI','seven']
    for i,tem in enumerate(li):
      print(i,tem)
56:l1 = ['a','b','c']
    l2  =['1','2','3']
    zipped = zip(l1,l2)
    print(list(zipped))
    #a1, a2 = zip(*zipped) #??why not work
    a1, a2 = zip(*zip(l1,l2)) #目前不知道有啥用
    print(list(a1))
    print(list(a2))
57: any() 有true就true all() 全true才true 
58: 两个列表的比较是逐元素进行对比  
59: 列表推导为啥比for快？
    l1 = [x for x in l1 if x > 255] ; 
    通过Python字节码反汇编模块dis可以知道底层是用C实现的，具体看 https://www.zhihu.com/question/34637934
    两层循环的链表表达式的写法，通过一个列子来看(判断一个矩阵是不是长对角矩阵,对角线上的元素都相等)
    
    class Solution(object):
    """
    所有对角线上的元素都满足 a_1 = a_2, a_2 = a_3, a_{k-1} = a_ka
    对于对角线上的元素来说，如果当前元素不是第一个出现的元素，
    那么它前面的元素一定在当前元素的左上角。
    可以推出，对于位于坐标 (r, c) 上的元素，只需要检查 r == 0 OR c == 0 OR matrix[r-1][c-1] == matrix[r][c] 就可以了。
    """

    def isToeplitzMatrix(self, matrix):
        # all()表示所有都为true才返回true
        # python里面可以在列表推导式里面使用双层for循环，但不建议超过两层
        return all(r == 0 or c == 0 or matrix[r - 1][c - 1] == val
                   for r, row in enumerate(matrix)
                   for c, val in enumerate(row))


    if __name__ == '__main__':
    matrix = [
        [1, 2, 3, 4],
        [5, 1, 2, 3],
        [9, 5, 1, 2]
    ]
    solution = Solution()
    output = solution.isToeplitzMatrix(matrix)
    print(output)
    
60: 用rindex和rfind可以从右边开始找
61: string类型的两个方法:index和find的区别在于当元素不存在的时候index会报错find不会报错
65: 矩阵转置的两种方法
    arr = [[1,2,3],[4,5,6],[7,8,9],[10,11,12]]
    1） list(map(list,zip(*arr)))
    2） [[row[col] for row in arr] for col in range(len(arr[0]))]
66: 输入参数解包
    def zipmartin(**args):
        for key,value in args.items():
            print(key, ':' , value)

    zipmartin(film='xiuxiudetiequan',title='loveyou')
    x = {'film':'xiuxiu','title':'love'}
    zipmartin(**x)
67: a = 1
    b = 2 
    def martin(x,y):
        print("before refrence:",x,y)
        x = 3
        y = 4
        print("after refrence:",x,y)

    martin(a,b)
    #before refrence: 1 2
    #after refrence: 3 4
68: 偏函数 固定住某些参数的值
    from functools import partial
    hex2int = partial(int, base=16)
    print(hex2int('E'))
69: 高阶函数 接收函数名作为参数
    >>> def martin(list1,func):
	        return func(list1)
    >>> martin([1,2,3,4,], max)
    4
    BIF 高阶函数 filter map reduce(两两操作)
    a = [-1,2,-3,4,-9,10]
    list(filter(lambda x : True if x>0 else False, a))
    list(map(lambda x: str(x)+'map',a))
     
    from functools import reduce
    reduce(lambda a,b:a+b, [-1,2,-3,4,-9,10])
70: def commonFunction(obj):
    obj.selfShow() #只要obj对象有对应方法就行，不用关心obj具体是什么
71: 七月在线python课程第五课 文件操作 并发
    用with操作如果发生异常文件句柄依然会正常关闭
72: 注意使用单下划线开头还是双下划线开头的问题
    双下划线主要是针对于类使用，单下划线主要用于模块导入时候的限制
https://stackoverflow.com/questions/6930144/underscore-vs-double-underscore-with-variables-and-methods
73：可以用 string.isidentifier()判断是不是有效的python标识符
74.[python中单下划线开头变量或者函数的理解](https://blog.csdn.net/debugm/article/details/8179482)
75.python的内存管理：https://blog.csdn.net/AlanGuoo/article/details/78756841
	+ 动态类型语言
		- 对变量内存地址的分配是在运行时自动检测变量类型并且赋值
		- python会缓存整形和短字符串 用id()可以检查内存地址是否相同
	+ 垃圾回收(引用计数+分代回收)
		- 引用计数 用sys包中的getrefcount()可查看某个对象的引用计数
		  * 这里就可以理解python中为什么会有GIL， 因为对某一个对象计数是需要线程安全的，不然每个线程都同时去计数，会发生内存泄露
		- 注意：当使用某个引用作为参数，传递给getrefcount()时，参数实际上创建了一个临时的引用,所以getrefcount()所得到的结果，会比期望的多1
		- 垃圾回收时，Python不能进行其它的任务。频繁的垃圾回收将大大降低工作效率。如果内存中对象不多，就没有必要总启动垃圾回收。所以，Python只会在特定条件下，自动启动垃圾回收
		- 当Python运行时，会记录其中分配对象(object allocation)和取消分配对象(object deallocation)的次数，当两者的差值高于某个阈值时，垃圾回收才会启动。
		- import gc 
		- gc.get_threshold() (700,10,10) #700是阈值 每10次0代垃圾回收，会配合1次1代的垃圾回收；而每10次1代的垃圾回收，才会有1次的2代垃圾回收
		- gc.set_threshold(700,5,5)
	+ 内存池(金字塔行)
		- -1，-2层主要有操作系统进行操作
		- 第0层是C中的malloc，free等内存分配和释放函数进行操作
		- 第1层和第2层是内存池，由Python的接口函数PyMem_Malloc函数实现，当对象小于256K时有该层直接分配内存
		- 第3层是最上层，也就是我们对Python对象的直接操作
	在 C 中如果频繁的调用 malloc 与 free 时,是会产生性能问题的.再加上频繁的分配与释放小块的内存会产生内存碎片
	Python的优化:
		- 如果请求分配的内存在1~256字节之间就使用自己的内存管理系统,否则直接使用 malloc
		- 这里还是会调用 malloc 分配内存,但每次会分配一块大小为256k的大块内存
		- 经由内存池登记的内存到最后还是会回收到内存池,并不会调用 C 的 free 释放掉
76. python队列的基本使用 https://www.cnblogs.com/yhleng/p/9493457.html
77. Python对象有装饰器的时候，先运行主函数 再运行装饰器函数，不能眼高手低，手动实现一个python装饰器, 有多个装饰器的时候，执行顺序 123321
    def check_time(func):
    from time import time
    def wrapper(*args,**kwargs):
        t1 = time()
        rtn = func(*args,**kwargs) #执行并且返回结果
        t2 = time()
        print('time elapsed:{}'.format(t2-t1))
        return rtn
    return wrapper
    
    @check_time
    def test():
	s = 0 
	for i in range(10)
	    s += i
	return s
78. Python中的深拷贝和浅拷贝

	# 深拷贝 copy.deepcopy() 没什么好说的
	# 浅拷贝有几种：赋值拷贝、用copy.copy()拷贝、切片拷贝
	# 赋值拷贝会影响原对象的值,后两个要注意是可变对象还是不可变对象去

	print('**********整数数组***********')
	a = [1,2,3]
	b = a
	c = a.copy()
	d = a[:1]
	print(a,b)
	b[1]=4
	print(a,b)#[1,4,3] [1,4,3]
	c[0]='hey'
	print(a,c)#[1,4,3],['hey',4,3]  1是不可变类型，所以不收影响
	d[0]=100
	print(a,d)#[1,4,3],[100]

	print('**********嵌套数组***********')
	a = [1,2,3,[4,5]]
	b = a
	c = a.copy()
	d = a[:1]
	print(a,b)
	b[3][1]=6#[1,2,3,[4,6]],[1,2,3,[4,6]]
	print(a,b)
	c[3].append(7)#[1,2,3,[4,6,7]],[1,2,3,[4,6,7]] 数组是可变类型，所以受到影响
	print(a,c)
	d[0]=100
	print(a,d)#[1,2,3,[4,6,7]],[100]

	print('**********字典复制***********')
	a = {'user':'Martin','score':[6,8]}
	b = a
	c = a.copy()
	d = a['score'][:1]
	print(a)
	b['user'] = 'Tom'
	b['score'].append(10)
	print(a,b)#{'user':'Tom','score':[6,8,10]} {'user':'Tom','score':[6,8,10]}
	c['user'] = 'Jack'
	c['score'].append(11)
	print(a,c)
	#{'user':'Tom','score':[6,8,10,11]} {'user':'Jack','score':[6,8,10]} 
	#字典value是不可变类型时 不收影响
	d[0]=100
	print(a,d)
	
79 python缓存机制

	from functools import lru_cache
	@lru_cache(None)
	def add(x, y):
	    print("calculating: %s + %s" % (x, y))
	    return x + y
	print(add(1, 2))
	print(add(1, 2))
	print(add(2, 3))
	#output
	calculating: 1 + 2
	3
	3 #没有运算，直接输出缓存结果
	calculating: 2 + 3
	5
80 Python提供了__future__模块，把下一个新版本的特性导入到当前版本
90 如何利用自己写的排序方法 可以欣赏力扣1122题目 同时包含了字典初始化的高级写法
	dic = {num:i for i,num in enumerate(arr2)}
        def compare(num): #注意这里的参数是原来数组中的元素
            return (0,dic[num]) if num in dic else (1,num)
        arr1.sort(key=compare)
        return arr1
91 如何优化python代码性能https://www.cnblogs.com/ajianbeyourself/p/4541826.html
   另外有一个尾递归的优化问题https://blog.csdn.net/qq_41974297/article/details/104995696
   
非语法问题
1:IDE用VSCODE原因是 扩展性、易用性强，免费，具体可以参考https://arbisoft.com/vs-code-versus-pycharm-the-smackdown/
2:根据二八法则，八成时间消耗在两成代码中，这些代码大部分是循环代码，所以主要看循环代码的性能
3:windows电脑安装 pyinstaller
在CMD下执行 pip install pyinstaller
然后在对应python文件夹中执行 pyinstaller -i -curve.ico -Fxxxx.py
注意 图标，要生成EXE的python文件要统一在当前目录 cmd也要先进入当前程序目录
结束后会生成一个dist的文件夹，里面包含了EXE文件
4:人类的三种思维特征
逻辑思维 推理和演绎 数学为代表 A->B B->C 则可以推出 A->C
实证思维 实验和验证 物理为代表 引力波 -> 实验
计算思维 设计和构造 计算机为代表 汉诺塔递归
  计算思维主要用于抽象问题的计算过程 关心设计和构造而非因果， 关心抽象和自动化
6:计算生态的概念 开源历史 python现在有超过15万个第三方库，以网络爬虫库为例，python自带的库已经被淘汰
7:python数据分析中常用的库 https://www.cnblogs.com/chaojiyingxiong/p/9939303.html
8:数据存储 主要关心存储格式 / 数据表示 主要关心数据类型 / 数据操作 主要关心操作方式
  在存储一维数据的时候最好采用文件内容中没有的字符，比如美元字符
